// Safety Assistance Page JavaScript
document.addEventListener('DOMContentLoaded', function() {
    // Check for URL parameters to show specific alerts
    const urlParams = new URLSearchParams(window.location.search);
    const alertType = urlParams.get('alert');
    const alertMessage = urlParams.get('message');
    
    // Remove duplicate declarations at the bottom of the file
    const removeDuplicates = true; // This is just a marker for the removal below

    // Show specific alert if parameters exist
    if (alertType && alertMessage) {
        const alertBox = document.getElementById('weatherAlert');
        const alertDetails = document.getElementById('alertDetails');
        
        // Set alert message
        document.getElementById('alertMessage').textContent = decodeURIComponent(alertMessage);
        
        // Set alert type and icon
        let icon = '‚ö†Ô∏è';
        switch(alertType) {
            case 'thunderstorm':
                icon = '‚õàÔ∏è';
                alertBox.classList.add('alert-danger');
                break;
            case 'extreme_heat':
                icon = 'ü•µ';
                alertBox.classList.add('alert-warning');
                break;
            case 'heavy_rain':
                icon = 'üåßÔ∏è';
                alertBox.classList.add('alert-info');
                break;
            case 'strong_wind':
                icon = 'üí®';
                alertBox.classList.add('alert-warning');
                break;
        }
        
        // Update alert icon
        const iconElement = alertBox.querySelector('.fa-exclamation-triangle');
        if (iconElement) {
            iconElement.textContent = icon;
            iconElement.classList.remove('fa-exclamation-triangle');
        }
        
        // Auto-select the weather issue in the form
        if (document.getElementById('weatherIssue')) {
            document.getElementById('weatherIssue').value = alertType;
            updateRecommendations(alertType);
        }
    }
    // Global variables
    let map = null;
    let userMarker = null;
    let locationCircle = null;
    let searchControl = null;

    // Function to initialize the map
    function initMap() {
        // Check if map container exists and isn't already initialized
        const mapElement = document.getElementById('safetyMap');
        if (!mapElement || mapElement._leaflet_id) {
            return;
        }

        // Default coordinates (Riyadh)
        const defaultCoords = [24.7136, 46.6753];
        
        try {
            // Initialize the map
            map = L.map('safetyMap', {
                center: defaultCoords,
                zoom: 13,
                zoomControl: true,
                trackResize: true,
                preferCanvas: true
            });
            
            // Add OpenStreetMap tiles
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
                maxZoom: 19
            }).addTo(map);
            
            // Add click event to update location
            map.on('click', function(e) {
                updateMapLocation(e.latlng.lat, e.latlng.lng);
            });
            
            // Initialize search control - try different ways the plugin might be available
            const SearchControl = window.L.control.search || 
                               window.Control && window.Control.Search || 
                               window.L.Control && window.L.Control.Search;

            if (typeof SearchControl === 'function') {
                try {
                    searchControl = new SearchControl({
                        position: 'topleft',
                        placeholder: 'Search location...',
                        zoom: 12,
                        marker: false,
                        autoCollapse: true,
                        autoType: false,
                        minLength: 3,
                        provider: new window.GeoSearch.OpenStreetMapProvider(),
                        showMarker: false,
                        showPopup: false,
                        retainZoomLevel: false,
                        animateZoom: true,
                        searchLabel: 'Enter location',
                        keepResult: false
                    });

                    searchControl.on('search:locationfound', function(e) {
                        if (e.location && e.location.x && e.location.y) {
                            updateMapLocation(e.location.y, e.location.x);
                        } else if (e.latlng) {
                            updateMapLocation(e.latlng.lat, e.latlng.lng);
                        }
                    });

                    searchControl.on('search:collapsed', function() {
                        // Handle search collapse if needed
                    });

                    map.addControl(searchControl);
                    
                } catch (error) {
                    console.error('Error initializing search control:', error);
                }
            } else {
                console.warn('Leaflet Search plugin not found. The search functionality will be disabled.');
                // Add a simple search input as fallback
                const searchContainer = L.control({position: 'toplend'});
                searchContainer.onAdd = function() {
                    const div = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');
                    div.innerHTML = `
                        <input type="text" id="locationSearch" 
                               placeholder="Search location..." 
                               style="width: 200px; padding: 5px; border: 2px solid #ccc; border-radius: 4px;">
                    `;
                    return div;
                };
                searchContainer.addTo(map);
                
                // Add event listener for the fallback search
                document.getElementById('locationSearch')?.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter' && this.value.trim()) {
                        const query = this.value.trim();
                        // Use OpenStreetMap Nominatim for geocoding
                        fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`)
                            .then(response => response.json())
                            .then(data => {
                                if (data && data[0]) {
                                    const lat = parseFloat(data[0].lat);
                                    const lon = parseFloat(data[0].lon);
                                    updateMapLocation(lat, lon);
                                    map.setView([lat, lon], 13);
                                }
                            })
                            .catch(error => console.error('Error searching location:', error));
                    }
                });
            }
            
            // Get user's current location
            getUserLocation();
            
        } catch (error) {
            console.error('Error initializing map:', error);
        }
    }
    
    // Initialize the map when the page loads
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initMap);
    } else {
        initMap();
    }

    // Get user's current location with options for better accuracy
    function getUserLocation(highAccuracy = false) {
        if (!navigator.geolocation) {
            showLocationError('Geolocation is not supported by this browser');
            return;
        }

        const loadingAlert = document.createElement('div');
        loadingAlert.className = 'alert alert-info';
        loadingAlert.id = 'locationLoading';
        loadingAlert.innerHTML = `
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <i class="fas fa-sync fa-spin me-2"></i>
                    ${highAccuracy ? 'ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ÿØŸäÿØ ŸÖŸàŸÇÿπŸÉ ÿ®ÿØŸÇÿ© ÿπÿßŸÑŸäÿ©...' : 'ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ÿØŸäÿØ ŸÖŸàŸÇÿπŸÉ...'}
                </div>
                ${!highAccuracy ? `
                <button class="btn btn-sm btn-outline-primary" id="highAccuracyBtn">
                    <i class="fas fa-crosshairs me-1"></i>ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿØŸÇÿ© ÿπÿßŸÑŸäÿ©
                </button>
                ` : ''}
            </div>
        `;
        
        const mapContainer = document.getElementById('safetyMap').parentNode;
        const existingAlert = document.getElementById('locationLoading');
        if (existingAlert) {
            existingAlert.remove();
        }
        mapContainer.insertBefore(loadingAlert, document.getElementById('safetyMap'));

        // Add high accuracy button event listener
        if (!highAccuracy) {
            setTimeout(() => {
                const highAccuracyBtn = document.getElementById('highAccuracyBtn');
                if (highAccuracyBtn) {
                    highAccuracyBtn.addEventListener('click', () => {
                        loadingAlert.remove();
                        getUserLocation(true);
                    });
                }
            }, 100);
        }

        const options = {
            enableHighAccuracy: highAccuracy,
            timeout: highAccuracy ? 10000 : 5000,
            maximumAge: highAccuracy ? 0 : 30000
        };

        navigator.geolocation.getCurrentPosition(
            (position) => {
                const { latitude, longitude, accuracy } = position.coords;
                userLocation = { lat: latitude, lng: longitude };
                locationAccuracy = accuracy;
                
                // Show accuracy circle if accuracy is available
                if (window.accuracyCircle) {
                    map.removeLayer(window.accuracyCircle);
                }
                
                window.accuracyCircle = L.circle([latitude, longitude], {
                    radius: accuracy,
                    color: '#007bff',
                    fillColor: '#007bff',
                    fillOpacity: 0.1,
                    weight: 1
                }).addTo(map);
                
                updateMapLocation(latitude, longitude);
                getLocationName(latitude, longitude);
                loadingAlert.remove();
                
                // Show accuracy info
                showLocationAccuracy(accuracy);
            },
            (error) => {
                console.error('Error getting location:', error);
                loadingAlert.className = 'alert alert-warning';
                let errorMessage = 'ÿ™ÿπÿ∞ÿ± ÿ™ÿ≠ÿØŸäÿØ ŸÖŸàŸÇÿπŸÉ. Ÿäÿ±ÿ¨Ÿâ ÿ™ÿ≠ÿØŸäÿØŸá ŸäÿØŸàŸäŸãÿß ÿπŸÑŸâ ÿßŸÑÿÆÿ±Ÿäÿ∑ÿ©.';
                
                switch(error.code) {
                    case error.PERMISSIONDenied:
                        errorMessage = 'ÿ™ŸÖ ÿ±ŸÅÿ∂ ÿ∑ŸÑÿ® ÿßŸÑŸàÿµŸàŸÑ ÿ•ŸÑŸâ ÿßŸÑŸÖŸàŸÇÿπ. Ÿäÿ±ÿ¨Ÿâ ÿ™ŸÅÿπŸäŸÑ ÿÆÿØŸÖÿßÿ™ ÿßŸÑŸÖŸàŸÇÿπ ŸÅŸä ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑŸÖÿ™ÿµŸÅÿ≠.';
                        break;
                    case error.POSITION_UNAVAILABLE:
                        errorMessage = 'ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑŸÖŸàŸÇÿπ ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÅÿ±ÿ© ÿ≠ÿßŸÑŸäŸãÿß. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ŸÑÿßÿ≠ŸÇŸãÿß.';
                        break;
                    case error.TIMEOUT:
                        errorMessage = 'ÿßŸÜÿ™Ÿáÿ™ ŸÖŸáŸÑÿ© ÿ∑ŸÑÿ® ÿßŸÑŸÖŸàŸÇÿπ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.';
                        break;
                }
                
                loadingAlert.innerHTML = `<i class="fas fa-exclamation-triangle me-2"></i>${errorMessage}`;
                updateMapLocation(24.7136, 46.6753); // Default to Riyadh coordinates
            },
            options
        );
    }
    
    // Show location accuracy information
    function showLocationAccuracy(accuracy) {
        const accuracyInfo = document.getElementById('locationAccuracy') || document.createElement('div');
        accuracyInfo.id = 'locationAccuracy';
        accuracyInfo.className = 'alert alert-info mt-2 py-1 small';
        accuracyInfo.innerHTML = `
            <i class="fas fa-info-circle me-1"></i>
            ÿØŸÇÿ© ÿßŸÑŸÖŸàŸÇÿπ: ${Math.round(accuracy)} ŸÖÿ™ÿ±
            <button class="btn btn-sm btn-link p-0 ms-2" id="improveAccuracyBtn">
                <i class="fas fa-crosshairs me-1"></i>ÿ™ÿ≠ÿ≥ŸäŸÜ ÿßŸÑÿØŸÇÿ©
            </button>
        `;
        
        const locationContainer = document.getElementById('safetyMap').parentNode;
        const existingAccuracy = document.getElementById('locationAccuracy');
        if (existingAccuracy) {
            existingAccuracy.remove();
        }
        locationContainer.insertBefore(accuracyInfo, document.getElementById('safetyMap').nextSibling);
        
        // Add event listener for improve accuracy button
        document.getElementById('improveAccuracyBtn').addEventListener('click', () => {
            getUserLocation(true);
        });
    }
    
    // Show location error message
    function showLocationError(message) {
        const errorAlert = document.createElement('div');
        errorAlert.className = 'alert alert-warning';
        errorAlert.innerHTML = `<i class="fas fa-exclamation-triangle me-2"></i>${message}`;
        document.getElementById('safetyMap').parentNode.insertBefore(errorAlert, document.getElementById('safetyMap'));
    }
    
    // Add locate button
    const locateBtn = L.control({position: 'topleft'});
    locateBtn.onAdd = function() {
        const div = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');
        div.innerHTML = '<a href="#" title="ÿ™ÿ≠ÿØŸäÿØ ŸÖŸàŸÇÿπŸä" role="button" aria-label="ÿ™ÿ≠ÿØŸäÿØ ŸÖŸàŸÇÿπŸä"><i class="fas fa-location-arrow"></i></a>';
        div.onclick = function(e) {
            L.DomEvent.stopPropagation(e);
            L.DomEvent.preventDefault(e);
            getUserLocation();
            return false;
        };
        return div;
    };
    locateBtn.addTo(map);
    
    // Initial location detection
    getUserLocation();

    // Update map location and marker
    function updateMapLocation(lat, lng) {
        map.setView([lat, lng], 13);
        
        // Remove existing marker if it exists
        if (marker) {
            map.removeLayer(marker);
        }
        
        // Create custom icon
        const customIcon = L.divIcon({
            className: 'custom-div-icon',
            html: `<div style='background-color: #0d6efd; width: 30px; height: 30px; border-radius: 50% 50% 50% 0; background: #0d6efd; position: absolute; transform: rotate(-45deg); left: 50%; top: 50%; margin: -15px 0 0 -15px;'></div>`,
            iconSize: [30, 30],
            iconAnchor: [15, 30]
        });
        
        // Add draggable marker with custom icon
        marker = L.marker([lat, lng], {
            draggable: true,
            icon: customIcon
        }).addTo(map);

        // Update marker position on drag end
        marker.on('dragend', function() {
            const position = marker.getLatLng();
            userLocation = { lat: position.lat, lng: position.lng };
            getLocationName(position.lat, position.lng);
        });
        
        // Update user location if it's close to the new position
        if (userLocation) {
            const distance = Math.sqrt(
                Math.pow(userLocation.lat - lat, 2) + 
                Math.pow(userLocation.lng - lng, 2)
            ) * 111; // Convert degrees to kilometers
            
            if (distance < 1) { // Within 1km
                marker.setLatLng([userLocation.lat, userLocation.lng]);
            }
        }
    }

    // Get location name from coordinates with caching
    async function getLocationName(lat, lng) {
        const cacheKey = `${lat.toFixed(4)},${lng.toFixed(4)}`;
        
        // Check cache first
        if (locationCache.has(cacheKey)) {
            updateLocationUI(locationCache.get(cacheKey));
            return;
        }
        
        // Show loading state
        const locationElement = document.getElementById('locationName') || document.createElement('div');
        locationElement.id = 'locationName';
        locationElement.className = 'location-info';
        locationElement.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑŸÖŸàŸÇÿπ...';
        
        // Create or update location info container
        let locationContainer = document.getElementById('locationInfoContainer');
        if (!locationContainer) {
            locationContainer = document.createElement('div');
            locationContainer.id = 'locationInfoContainer';
            locationContainer.className = 'location-info-container mb-3 p-3 bg-light rounded';
            document.getElementById('safetyMap').parentNode.insertBefore(locationContainer, document.getElementById('safetyMap').nextSibling);
        }
        
        try {
            // Add rate limiting delay (Nominatim requires 1 second between requests)
            await new Promise(resolve => setTimeout(resolve, 1100));
            
            const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&accept-language=ar&addressdetails=1`);
            const data = await response.json();
            
            let locationName = 'ŸÖŸàŸÇÿπŸÉ ÿßŸÑÿ≠ÿßŸÑŸä';
            const address = data.address || {};
            
            // Build hierarchical location name
            const locationParts = [
                address.road,
                address.quarter || address.suburb,
                address.city || address.town || address.village,
                address.county,
                address.state,
                address.country
            ].filter(Boolean);
            
            locationName = locationParts.length > 0 ? locationParts.join('ÿå ') : 'ŸÖŸàŸÇÿπŸÉ ÿßŸÑÿ≠ÿßŸÑŸä';
            
            // Cache the result
            const locationData = {
                name: locationName,
                address: address,
                timestamp: new Date().toISOString()
            };
            locationCache.set(cacheKey, locationData);
            
            // Update UI with location details
            updateLocationUI(locationData);
            
        } catch (error) {
            console.error('Error getting location name:', error);
            locationElement.innerHTML = '<i class="fas fa-exclamation-triangle text-warning me-2"></i>ÿ™ÿπÿ∞ÿ± ÿ™ÿ≠ŸÖŸäŸÑ ÿßÿ≥ŸÖ ÿßŸÑŸÖŸàŸÇÿπ';
        }
    }
    
    // Update location information in the UI
    function updateLocationUI(locationData) {
        const { name, address } = locationData;
        const locationElement = document.getElementById('locationName') || document.createElement('div');
        locationElement.id = 'locationName';
        locationElement.className = 'location-info';
        
        // Create detailed location info
        let locationDetails = `
            <div class="location-details">
                <h6 class="mb-2"><i class="fas fa-map-marker-alt text-primary me-2"></i>${name}</h6>
        `;
        
        // Add address components if available
        if (address) {
            if (address.road) locationDetails += `<div class="text-muted small">${address.road}</div>`;
            if (address.quarter || address.suburb) {
                locationDetails += `<div class="text-muted small">${address.quarter || address.suburb}</div>`;
            }
            if (address.city || address.town || address.village) {
                locationDetails += `<div>${address.city || address.town || address.village}</div>`;
            }
        }
        
        locationDetails += '</div>';
        locationElement.innerHTML = locationDetails;
        
        // Update location info container
        const locationContainer = document.getElementById('locationInfoContainer');
        if (locationContainer) {
            locationContainer.innerHTML = '';
            locationContainer.appendChild(locationElement);
        }
    }

    // Toggle other issue input field and update recommendations
    const weatherIssueSelect = document.getElementById('weatherIssue');
    if (weatherIssueSelect) {
        // Remove any existing event listener to prevent duplicates
        const newWeatherIssueSelect = weatherIssueSelect.cloneNode(true);
        weatherIssueSelect.parentNode.replaceChild(newWeatherIssueSelect, weatherIssueSelect);
        
        newWeatherIssueSelect.addEventListener('change', function() {
            const otherIssueContainer = document.getElementById('otherIssueContainer');
            const selectedValue = this.value;
            
            if (otherIssueContainer) {
                otherIssueContainer.style.display = selectedValue === 'other' ? 'block' : 'none';
            }
            
            if (selectedValue !== 'other') {
                updateRecommendations(selectedValue);
                
                // Update alert message based on selection
                const alertBox = document.getElementById('weatherAlert');
                const alertMessage = document.getElementById('alertMessage');
                
                if (alertBox && alertMessage) {
                    const issueText = this.options[this.selectedIndex].text;
                    alertMessage.innerHTML = `ÿ™ŸÖ ÿßŸÑŸÉÿ¥ŸÅ ÿπŸÜ: <strong>${issueText}</strong> ŸÅŸä ŸÖŸÜÿ∑ŸÇÿ™ŸÉ. Ÿäÿ±ÿ¨Ÿâ ÿßÿ™ÿÆÿßÿ∞ ÿßŸÑÿßÿ≠ÿ™Ÿäÿßÿ∑ÿßÿ™ ÿßŸÑŸÑÿßÿ≤ŸÖÿ©.`;
                    
                    // Update alert type
                    alertBox.className = 'alert alert-warning alert-box';
                    if (selectedValue === 'thunderstorm' || selectedValue === 'extreme_heat') {
                        alertBox.classList.add('alert-danger');
                    }
                }
            }
        });
    }

    // Handle form submission
    const submitButton = document.getElementById('submitHelpRequest');
    if (submitButton) {
        submitButton.addEventListener('click', function() {
            const issueSelect = document.getElementById('weatherIssue');
            const issue = issueSelect.value;
            const issueText = issueSelect.options[issueSelect.selectedIndex].text;
            const otherIssue = document.getElementById('otherIssue').value;
            const assistanceTypeSelect = document.getElementById('assistanceType');
            const assistanceType = assistanceTypeSelect.value;
            const assistanceText = assistanceTypeSelect.options[assistanceTypeSelect.selectedIndex].text;
            const description = document.getElementById('description').value;
            const isUrgent = document.getElementById('urgent').checked;
            const userName = document.getElementById('userName').value;
            const phoneNumber = document.getElementById('phoneNumber').value;
            
            // Validate required fields
            if (!issue) {
                showAlert('ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ™ÿ≠ÿØŸäÿØ ŸÜŸàÿπ ÿßŸÑÿ≠ÿßŸÑÿ© ÿßŸÑÿ¨ŸàŸäÿ©', 'danger');
                return;
            }
            
            if (issue === 'other' && !otherIssue.trim()) {
                showAlert('ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿ≠ÿßŸÑÿ© ÿßŸÑÿ¨ŸàŸäÿ©', 'danger');
                return;
            }
            
            const position = marker.getLatLng();
            
            // Prepare request data
            const requestData = {
                user: {
                    name: userName,
                    phone: phoneNumber
                },
                location: {
                    lat: position.lat,
                    lng: position.lng,
                    name: document.querySelector('#locationName')?.textContent || 'ŸÖŸàŸÇÿπ ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅ'
                },
                issue: {
                    type: issue,
                    description: issue === 'other' ? otherIssue : issueText
                },
                assistance: {
                    type: assistanceType,
                    description: assistanceText
                },
                details: description,
                isUrgent: isUrgent,
                timestamp: new Date().toISOString(),
                status: 'new'
            };
            
            // Show loading state
            const spinner = document.getElementById('submitSpinner');
            const originalButtonText = submitButton.innerHTML;
            submitButton.disabled = true;
            spinner.classList.remove('d-none');
            
            // Simulate API call (replace with actual API call)
            setTimeout(() => {
                console.log('Help request submitted:', requestData);
                
                // Show success message
                document.getElementById('successAlert').classList.remove('d-none');
                
                // Reset form
                document.getElementById('weatherForm').reset();
                
                // Hide success message after 5 seconds
                setTimeout(() => {
                    document.getElementById('successAlert').classList.add('d-none');
                }, 5000);
                
                // Reset button state
                submitButton.disabled = false;
                spinner.classList.add('d-none');
                
                // Notify emergency services if urgent
                if (isUrgent) {
                    notifyEmergencyServices(requestData);
                }
                
            }, 1500);
        });
    }
    
    // Function to show alert message
    function showAlert(message, type = 'info') {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show mt-3`;
        alertDiv.role = 'alert';
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;
        
        const form = document.querySelector('.card-body');
        form.insertBefore(alertDiv, form.firstChild);
        
        // Auto-dismiss after 5 seconds
        setTimeout(() => {
            alertDiv.classList.remove('show');
            setTimeout(() => alertDiv.remove(), 150);
        }, 5000);
    }
    
    // Function to notify emergency services (simulated)
    function notifyEmergencyServices(requestData) {
        console.log('Notifying emergency services:', requestData);
        // In a real app, this would be an API call to your backend
        // which would then notify the appropriate emergency services
    }

    // Update safety recommendations based on weather issue
    function updateRecommendations(weatherIssue) {
        const recommendationsContainer = document.getElementById('safetyRecommendations');
        if (!recommendationsContainer) return;
        
        let recommendations = [];
        let icon = '‚ö†Ô∏è';
        let title = 'ŸÜÿµÿßÿ¶ÿ≠ ÿ£ŸÖÿßŸÜ ÿπÿßŸÖÿ©';
        
        // Define recommendations for each weather condition in Arabic
        switch(weatherIssue) {
            case 'heavy_rain':
                icon = 'üåßÔ∏è';
                title = 'ŸÜÿµÿßÿ¶ÿ≠ ŸÑŸÑÿ£ŸÖÿ∑ÿßÿ± ÿßŸÑÿ∫ÿ≤Ÿäÿ±ÿ© ŸàÿßŸÑŸÅŸäÿ∂ÿßŸÜÿßÿ™';
                recommendations = [
                    'ÿßŸÑÿßŸÜÿ™ŸÇÿßŸÑ ÿ•ŸÑŸâ ÿ£ÿ±ÿ∂ ŸÖÿ±ÿ™ŸÅÿπÿ© ÿ•ÿ∞ÿß ŸÉŸÜÿ™ ŸÅŸä ŸÖŸÜÿ∑ŸÇÿ© ŸÖÿπÿ±ÿ∂ÿ© ŸÑŸÑŸÅŸäÿ∂ÿßŸÜÿßÿ™.',
                    'ÿ™ÿ¨ŸÜÿ® ÿßŸÑÿ≥Ÿäÿ± ÿ£Ÿà ÿßŸÑŸÇŸäÿßÿØÿ© ŸÅŸä ŸÖŸäÿßŸá ÿßŸÑŸÅŸäÿ∂ÿßŸÜÿßÿ™.',
                    'ÿßÿ®ÿ™ÿπÿØ ÿπŸÜ ÿÆÿ∑Ÿàÿ∑ ÿßŸÑŸÉŸáÿ±ÿ®ÿßÿ° ÿßŸÑŸÖÿ™ÿ≥ÿßŸÇÿ∑ÿ©.',
                    'ÿßÿ≠ÿ™ŸÅÿ∏ ÿ®ÿ≠ŸÇŸäÿ®ÿ© ÿ∑Ÿàÿßÿ±ÿ¶ ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿ∑ÿπÿßŸÖ ŸàŸÖÿßÿ° Ÿàÿ£ÿØŸàŸäÿ©.',
                    'ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ŸÜÿ∏ÿßŸÅÿ© ŸÖÿ¨ÿßÿ±Ÿä ÿßŸÑŸÖŸäÿßŸá ÿ≠ŸàŸÑ ŸÖŸÜÿ≤ŸÑŸÉ.',
                    'ŸÑÿß ÿ™ÿ≠ÿßŸàŸÑ ÿπÿ®Ÿàÿ± ÿßŸÑÿ¨ÿ≥Ÿàÿ± ÿßŸÑŸÖÿ∫ŸÖŸàÿ±ÿ© ÿ®ÿßŸÑŸÖŸäÿßŸá.'
                ];
                break;
                
            case 'thunderstorm':
                icon = '‚ö°';
                title = 'ŸÜÿµÿßÿ¶ÿ≠ ŸÑŸÑÿπŸàÿßÿµŸÅ ÿßŸÑÿ±ÿπÿØŸäÿ© ŸàÿßŸÑÿ®ÿ±ŸÇ';
                recommendations = [
                    'ÿßÿ®ŸÇŸé ŸÅŸä ÿßŸÑÿØÿßÿÆŸÑ Ÿàÿßÿ®ÿ™ÿπÿØ ÿπŸÜ ÿßŸÑŸÜŸàÿßŸÅÿ∞.',
                    'ÿ™ÿ¨ŸÜÿ® ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ£ÿ¨Ÿáÿ≤ÿ© ÿßŸÑŸÉŸáÿ±ÿ®ÿßÿ¶Ÿäÿ© ŸàÿßŸÑÿ≥ÿ®ÿßŸÉÿ©.',
                    'ÿ•ÿ∞ÿß ŸÉŸÜÿ™ ÿ®ÿßŸÑÿÆÿßÿ±ÿ¨ÿå ÿßÿ®ÿ≠ÿ´ ÿπŸÜ ŸÖŸÜÿ∑ŸÇÿ© ŸÖŸÜÿÆŸÅÿ∂ÿ© ÿ®ÿπŸäÿØŸãÿß ÿπŸÜ ÿßŸÑÿ£ÿ¥ÿ¨ÿßÿ± ŸàÿßŸÑÿ£ÿ¨ÿ≥ÿßŸÖ ÿßŸÑŸÖÿπÿØŸÜŸäÿ©.',
                    'ÿßŸÜÿ™ÿ∏ÿ± 30 ÿØŸÇŸäŸÇÿ© ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ ÿ®ÿπÿØ ÿ¢ÿÆÿ± ÿ±ÿπÿØÿ© ŸÇÿ®ŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨.',
                    'ÿßŸÅÿµŸÑ ÿßŸÑÿ£ÿ¨Ÿáÿ≤ÿ© ÿßŸÑŸÉŸáÿ±ÿ®ÿßÿ¶Ÿäÿ© ÿßŸÑÿ≠ÿ≥ÿßÿ≥ÿ©.',
                    'ŸÑÿß ÿ™ÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑŸáÿßÿ™ŸÅ ÿßŸÑÿ£ÿ±ÿ∂Ÿä ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿπÿßÿµŸÅÿ©.'
                ];
                break;
                
            case 'extreme_heat':
                icon = 'ü•µ';
                title = 'ŸÜÿµÿßÿ¶ÿ≠ ŸÑŸÖŸàÿ¨ÿßÿ™ ÿßŸÑÿ≠ÿ± ÿßŸÑÿ¥ÿØŸäÿØÿ©';
                recommendations = [
                    'ÿßÿ®ŸÇŸé ŸÅŸä ÿßŸÑÿ£ŸÖÿßŸÉŸÜ ÿßŸÑŸÖŸÉŸäŸÅÿ© ŸÇÿØÿ± ÿßŸÑÿ•ŸÖŸÉÿßŸÜ.',
                    'ÿßÿ¥ÿ±ÿ® ÿßŸÑŸÉÿ´Ÿäÿ± ŸÖŸÜ ÿßŸÑŸÖÿßÿ° Ÿàÿ™ÿ¨ŸÜÿ® ÿßŸÑŸÖÿ¥ÿ±Ÿàÿ®ÿßÿ™ ÿßŸÑÿ™Ÿä ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ÿßŸÑŸÉÿßŸÅŸäŸäŸÜ ÿ£Ÿà ÿßŸÑŸÉÿ≠ŸàŸÑ.',
                    'ÿßÿ±ÿ™ÿØŸê ŸÖŸÑÿßÿ®ÿ≥ ÿÆŸÅŸäŸÅÿ© ŸàŸÅÿ∂ŸÅÿßÿ∂ÿ© Ÿàÿ∞ÿßÿ™ ÿ£ŸÑŸàÿßŸÜ ŸÅÿßÿ™ÿ≠ÿ©.',
                    'ÿßŸÅÿ≠ÿµ ÿπŸÑŸâ ŸÉÿ®ÿßÿ± ÿßŸÑÿ≥ŸÜ ŸàÿßŸÑÿ£ÿ∑ŸÅÿßŸÑ ŸàÿßŸÑÿ≠ŸäŸàÿßŸÜÿßÿ™ ÿßŸÑÿ£ŸÑŸäŸÅÿ©.',
                    'ÿ™ÿ¨ŸÜÿ® ÿßŸÑÿ™ÿπÿ±ÿ∂ ÿßŸÑŸÖÿ®ÿßÿ¥ÿ± ŸÑÿ£ÿ¥ÿπÿ© ÿßŸÑÿ¥ŸÖÿ≥ ŸÅŸä ÿ≥ÿßÿπÿßÿ™ ÿßŸÑÿ∞ÿ±Ÿàÿ©.',
                    'ÿßÿ≥ÿ™ÿÆÿØŸÖ ŸàÿßŸÇŸä ÿßŸÑÿ¥ŸÖÿ≥ ÿπŸÜÿØ ÿßŸÑÿÆÿ±Ÿàÿ¨.'
                ];
                break;
                
            case 'extreme_cold':
                icon = 'ü•∂';
                title = 'ŸÜÿµÿßÿ¶ÿ≠ ŸÑŸÖŸàÿ¨ÿßÿ™ ÿßŸÑÿ®ÿ±ÿØ ÿßŸÑÿ¥ÿØŸäÿØ';
                recommendations = [
                    'ÿßÿ±ÿ™ÿØŸä ÿ∑ÿ®ŸÇÿßÿ™ ŸÖÿ™ÿπÿØÿØÿ© ŸÖŸÜ ÿßŸÑŸÖŸÑÿßÿ®ÿ≥ ÿßŸÑÿØÿßŸÅÿ¶ÿ©.',
                    'ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ™ÿØŸÅÿ¶ÿ© ÿßŸÑŸÖŸÜÿ≤ŸÑ ÿ®ÿ¥ŸÉŸÑ ÿ¨ŸäÿØ.',
                    'ÿßŸÅÿ≠ÿµ ÿπŸÑŸâ ÿßŸÑÿ¨Ÿäÿ±ÿßŸÜ ŸàŸÉÿ®ÿßÿ± ÿßŸÑÿ≥ŸÜ.',
                    'ÿßÿ≠ÿ±ÿµ ÿπŸÑŸâ ÿ™ÿØŸÅÿ¶ÿ© ÿßŸÑÿ£ŸÜÿßÿ®Ÿäÿ® ŸÑŸÖŸÜÿπ ÿ™ÿ¨ŸÖÿØŸáÿß.',
                    'ÿ™ÿ¨ŸÜÿ® ÿßŸÑÿÆÿ±Ÿàÿ¨ ÿ•ŸÑÿß ŸÑŸÑÿ∂ÿ±Ÿàÿ±ÿ© ÿßŸÑŸÇÿµŸàŸâ.',
                    'ÿßÿ≠ÿ±ÿµ ÿπŸÑŸâ ÿ™ÿ∫ÿ∑Ÿäÿ© ÿßŸÑÿ±ÿ£ÿ≥ ŸàÿßŸÑÿ£ÿ∞ŸÜŸäŸÜ ŸàÿßŸÑŸäÿØŸäŸÜ ÿπŸÜÿØ ÿßŸÑÿÆÿ±Ÿàÿ¨.'
                ];
                break;
                
            case 'strong_wind':
                icon = 'üí®';
                title = 'ŸÜÿµÿßÿ¶ÿ≠ ŸÑŸÑÿ±Ÿäÿßÿ≠ ÿßŸÑŸÇŸàŸäÿ© ŸàÿßŸÑÿπŸàÿßÿµŸÅ';
                recommendations = [
                    'ÿßÿ®ŸÇŸé ŸÅŸä ÿßŸÑÿØÿßÿÆŸÑ Ÿàÿßÿ®ÿ™ÿπÿØ ÿπŸÜ ÿßŸÑŸÜŸàÿßŸÅÿ∞ ŸàÿßŸÑÿ£ÿ®Ÿàÿßÿ® ÿßŸÑÿÆÿßÿ±ÿ¨Ÿäÿ©.',
                    'ÿ£ÿ≠ŸÉŸÖ ÿ™ÿ´ÿ®Ÿäÿ™ ÿßŸÑÿ£ÿ¥Ÿäÿßÿ° ÿßŸÑÿÆÿßÿ±ÿ¨Ÿäÿ© ÿßŸÑÿ™Ÿä ŸÇÿØ ÿ™ÿ∑Ÿäÿ± ÿ®ŸÅÿπŸÑ ÿßŸÑÿ±Ÿäÿßÿ≠.',
                    'ŸÉŸÜ ÿ≠ÿ∞ÿ±Ÿãÿß ŸÖŸÜ ÿßŸÑÿ≠ÿ∑ÿßŸÖ ÿßŸÑŸÖÿ™ÿ∑ÿßŸäÿ±.',
                    'ÿ•ÿ∞ÿß ŸÉŸÜÿ™ ÿ™ŸÇŸàÿØÿå ŸÉŸÜ ÿ≠ÿ∞ÿ±Ÿãÿß ŸÖŸÜ ÿßŸÑÿ£ÿ∫ÿµÿßŸÜ ÿßŸÑŸÖÿ™ÿ≥ÿßŸÇÿ∑ÿ© ŸàÿÆÿ∑Ÿàÿ∑ ÿßŸÑŸÉŸáÿ±ÿ®ÿßÿ°.',
                    'ÿ™ÿ¨ŸÜÿ® ÿßŸÑŸàŸÇŸàŸÅ ÿ™ÿ≠ÿ™ ÿßŸÑÿ£ÿ¥ÿ¨ÿßÿ± ÿ£Ÿà ÿßŸÑŸÖÿ®ÿßŸÜŸä ÿßŸÑÿπÿßŸÑŸäÿ©.',
                    'ÿ£ÿ∫ŸÑŸÇ ÿßŸÑŸÜŸàÿßŸÅÿ∞ ŸàÿßŸÑÿ£ÿ®Ÿàÿßÿ® ÿßŸÑÿÆÿßÿ±ÿ¨Ÿäÿ© ÿ®ÿ•ÿ≠ŸÉÿßŸÖ.'
                ];
                break;
                
            case 'sandstorm':
                icon = 'üå™Ô∏è';
                title = 'ŸÜÿµÿßÿ¶ÿ≠ ŸÑŸÑÿπŸàÿßÿµŸÅ ÿßŸÑÿ±ŸÖŸÑŸäÿ©';
                recommendations = [
                    'ÿßÿ∫ŸÑŸÇ ÿßŸÑŸÜŸàÿßŸÅÿ∞ ŸàÿßŸÑÿ£ÿ®Ÿàÿßÿ® ÿ®ÿ•ÿ≠ŸÉÿßŸÖ.',
                    'ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑŸÉŸÖÿßŸÖÿßÿ™ ÿ£Ÿà ŸÖŸÜÿßÿØŸäŸÑ ŸÖÿ®ŸÑŸÑÿ© ŸÑÿ≠ŸÖÿßŸäÿ© ÿ£ŸÜŸÅŸÉ ŸàŸÅŸÖŸÉ.',
                    'ÿ•ÿ∞ÿß ŸÉŸÜÿ™ ÿ®ÿßŸÑÿÆÿßÿ±ÿ¨ÿå ÿßÿ®ÿ≠ÿ´ ÿπŸÜ ŸÖÿ£ŸàŸâ ŸÅŸàÿ±Ÿãÿß.',
                    'ÿ™ÿ¨ŸÜÿ® ÿßŸÑŸÇŸäÿßÿØÿ© ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿπÿßÿµŸÅÿ© ÿßŸÑÿ±ŸÖŸÑŸäÿ©.',
                    'ÿßÿ≠ŸÖŸê ÿπŸäŸÜŸäŸÉ ÿ®ÿßŸÑŸÜÿ∏ÿßÿ±ÿßÿ™ ÿßŸÑŸàÿßŸÇŸäÿ©.',
                    'ÿßÿ∫ÿ≥ŸÑ Ÿàÿ¨ŸáŸÉ ŸàŸäÿØŸäŸÉ ÿ¨ŸäÿØŸãÿß ÿ®ÿπÿØ ÿßŸÜÿ™Ÿáÿßÿ° ÿßŸÑÿπÿßÿµŸÅÿ©.'
                ];
                break;
                
            case 'fog':
                icon = 'üå´Ô∏è';
                title = 'ŸÜÿµÿßÿ¶ÿ≠ ŸÑŸÑÿ∂ÿ®ÿßÿ® ÿßŸÑŸÉÿ´ŸäŸÅ';
                recommendations = [
                    'ÿÆŸÅŸÅ ÿßŸÑÿ≥ÿ±ÿπÿ© Ÿàÿßÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑÿ£ÿ∂Ÿàÿßÿ° ÿßŸÑŸÖŸÜÿÆŸÅÿ∂ÿ© ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑŸÇŸäÿßÿØÿ©.',
                    'ÿ≠ÿßŸÅÿ∏ ÿπŸÑŸâ ŸÖÿ≥ÿßŸÅÿ© ÿ£ŸÖÿßŸÜ ÿ£ŸÉÿ®ÿ± ÿ®ŸäŸÜŸÉ Ÿàÿ®ŸäŸÜ ÿßŸÑÿ≥Ÿäÿßÿ±ÿ© ÿßŸÑÿ™Ÿä ÿ£ŸÖÿßŸÖŸÉ.',
                    'ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ•ÿ¥ÿßÿ±ÿßÿ™ ÿßŸÑÿ∑Ÿàÿßÿ±ÿ¶ ÿ•ÿ∞ÿß ÿ™ŸàŸÇŸÅÿ™ ÿπŸÑŸâ ÿ¨ÿßŸÜÿ® ÿßŸÑÿ∑ÿ±ŸäŸÇ.',
                    'ÿ™ÿ¨ŸÜÿ® ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑŸÖÿ≥ÿßÿ±ÿßÿ™ ÿ®ÿ¥ŸÉŸÑ ŸÖŸÅÿßÿ¨ÿ¶.',
                    'ÿ•ÿ∞ÿß ŸÉÿßŸÜ ÿßŸÑÿ∂ÿ®ÿßÿ® ŸÉÿ´ŸäŸÅŸãÿß ÿ¨ÿØŸãÿßÿå ÿßÿ®ÿ≠ÿ´ ÿπŸÜ ŸÖŸÉÿßŸÜ ÿ¢ŸÖŸÜ ŸàÿßŸÜÿ™ÿ∏ÿ± ÿ≠ÿ™Ÿâ Ÿäÿ™ÿ≠ÿ≥ŸÜ ÿßŸÑÿ∑ŸÇÿ≥.',
                    'ÿßÿ≥ÿ™ŸÖÿπ ÿ•ŸÑŸâ ÿ™ÿ≠ÿØŸäÿ´ÿßÿ™ ÿßŸÑÿ∑ÿ±ŸÇ ŸàÿßŸÑŸÖÿ±Ÿàÿ±.'
                ];
                break;
                
            default:
                icon = '‚ÑπÔ∏è';
                title = 'ŸÜÿµÿßÿ¶ÿ≠ ÿ£ŸÖÿßŸÜ ÿπÿßŸÖÿ©';
                recommendations = [
                    'ÿ™ÿßÿ®ÿπ ÿ™ÿ≠ÿØŸäÿ´ÿßÿ™ ÿßŸÑÿ∑ŸÇÿ≥ ÿßŸÑŸÖÿ≠ŸÑŸäÿ© ŸàÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™ ÿßŸÑÿ±ÿ≥ŸÖŸäÿ©.',
                    'ÿßÿ™ÿ®ÿπ ÿ™ÿπŸÑŸäŸÖÿßÿ™ ÿßŸÑÿØŸÅÿßÿπ ÿßŸÑŸÖÿØŸÜŸä ŸàÿßŸÑÿ¨Ÿáÿßÿ™ ÿßŸÑŸÖÿÆÿ™ÿµÿ©.',
                    'ÿßÿ≠ÿ±ÿµ ÿπŸÑŸâ Ÿàÿ¨ŸàÿØ ÿ≠ŸÇŸäÿ®ÿ© ÿ∑Ÿàÿßÿ±ÿ¶ ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ŸÖÿ≥ÿ™ŸÑÿ≤ŸÖÿßÿ™ ÿ£ÿ≥ÿßÿ≥Ÿäÿ©.',
                    'ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ŸÖÿπÿ±ŸÅÿ© ÿ∑ÿ±ŸÇ ÿßŸÑÿ•ÿÆŸÑÿßÿ° ŸÅŸä ŸÖŸÜÿ∑ŸÇÿ™ŸÉ.',
                    'ÿßÿ≠ÿ™ŸÅÿ∏ ÿ®ÿ£ÿ±ŸÇÿßŸÖ ÿßŸÑÿ∑Ÿàÿßÿ±ÿ¶ ŸÅŸä ŸÖÿ™ŸÜÿßŸàŸÑ ÿßŸÑŸäÿØ.',
                    'ÿÆÿ∑ÿ∑ ŸÖÿ≥ÿ®ŸÇŸãÿß ŸÑŸÉŸäŸÅŸäÿ© ÿßŸÑÿ™ŸàÿßÿµŸÑ ŸÖÿπ ÿπÿßÿ¶ŸÑÿ™ŸÉ ŸÅŸä ÿ≠ÿßŸÑÿßÿ™ ÿßŸÑÿ∑Ÿàÿßÿ±ÿ¶.'
                ];
        }

        // Create recommendation HTML with RTL support
        let recommendationsHTML = `
            <div class="alert alert-info">
                <h5 class="mb-3"><span class="fs-4">${icon}</span> ${title}</h5>
                <div class="recommendations-list">
        `;
        
        recommendations.forEach(rec => {
            recommendationsHTML += `
                <div class="recommendation-card p-3 bg-light mb-2 rounded">
                    <p class="mb-0">
                        <i class="fas fa-check-circle text-success ms-2"></i>
                        ${rec}
                    </p>
                </div>
            `;
        });
        
        // Add emergency contacts section
        recommendationsHTML += `
            </div>
            <div class="emergency-contacts mt-4">
                <h6 class="border-bottom pb-2 mb-3"><i class="fas fa-phone-volume me-2"></i>ÿ£ÿ±ŸÇÿßŸÖ ÿßŸÑÿ∑Ÿàÿßÿ±ÿ¶</h6>
                <div class="row g-2">
                    <div class="col-6">
                        <a href="tel:911" class="btn btn-outline-danger w-100 text-start">
                            <i class="fas fa-phone-alt me-2"></i>ÿßŸÑÿ∑Ÿàÿßÿ±ÿ¶
                            <span class="float-start">911</span>
                        </a>
                    </div>
                    <div class="col-6">
                        <a href="tel:997" class="btn btn-outline-danger w-100 text-start">
                            <i class="fas fa-ambulance me-2"></i>ÿßŸÑÿ•ÿ≥ÿπÿßŸÅ
                            <span class="float-start">997</span>
                        </a>
                    </div>
                    <div class="col-6">
                        <a href="tel:998" class="btn btn-outline-danger w-100 text-start">
                            <i class="fas fa-fire-extinguisher me-2"></i>ÿßŸÑÿØŸÅÿßÿπ ÿßŸÑŸÖÿØŸÜŸä
                            <span class="float-start">998</span>
                        </a>
                    </div>
                    <div class="col-6">
                        <a href="tel:999" class="btn btn-outline-danger w-100 text-start">
                            <i class="fas fa-shield-alt me-2"></i>ÿßŸÑÿ¥ÿ±ÿ∑ÿ©
                            <span class="float-start">999</span>
                        </a>
                    </div>
                </div>
            </div>
        `;
        
        // Add nearby places section if relevant
        if (['extreme_heat', 'heavy_rain', 'thunderstorm'].includes(weatherIssue)) {
            const placeType = weatherIssue === 'extreme_heat' ? 'ŸÖÿ±ÿßŸÉÿ≤ ÿßŸÑÿ™ÿ®ÿ±ŸäÿØ' : 'ÿßŸÑŸÖŸÑÿßÿ¨ÿ¶ ÿßŸÑŸÇÿ±Ÿäÿ®ÿ©';
            recommendationsHTML += `
                <div class="nearby-places mt-4">
                    <h6 class="border-bottom pb-2 mb-3">
                        <i class="fas fa-map-marker-alt me-2"></i>${placeType}
                    </h6>
                    <div id="nearbyPlacesList" class="list-group">
                        <div class="list-group-item">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="mb-1">ŸÖÿ±ŸÉÿ≤ ÿßŸÑÿ•ÿ∫ÿßÿ´ÿ© ÿßŸÑŸÖÿ≠ŸÑŸä</h6>
                                    <small class="text-muted">ÿπŸÑŸâ ÿ®ÿπÿØ 1.2 ŸÉŸÖ</small>
                                </div>
                                <a href="#" class="btn btn-sm btn-outline-primary">ÿπÿ±ÿ∂ ÿßŸÑÿÆÿ±Ÿäÿ∑ÿ©</a>
                            </div>
                        </div>
                        <div class="list-group-item">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="mb-1">${weatherIssue === 'extreme_heat' ? 'ŸÖÿ±ŸÉÿ≤ ÿ™ÿ≥ŸàŸÇ ŸÖŸÉŸäŸÅ' : 'ŸÖÿ£ŸàŸâ ÿßŸÑÿ∑Ÿàÿßÿ±ÿ¶'}</h6>
                                    <small class="text-muted">ÿπŸÜÿØ ÿ®ÿπÿØ 2.3 ŸÉŸÖ</small>
                                </div>
                                <a href="#" class="btn btn-sm btn-outline-primary">ÿπÿ±ÿ∂ ÿßŸÑÿÆÿ±Ÿäÿ∑ÿ©</a>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        recommendationsHTML += '</div>'; // Close alert div
        
        // Add some CSS for the recommendations
        const style = document.createElement('style');
        style.textContent = `
            .recommendations-list {
                max-height: 400px;
                overflow-y: auto;
                padding: 10px;
            }
            .recommendation-card {
                transition: all 0.3s ease;
                border-right: 4px solid #0d6efd;
                border-radius: 4px;
                margin-bottom: 10px;
            }
            .recommendation-card:hover {
                transform: translateX(-5px);
                box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            }
            .emergency-contacts .btn {
                text-align: right;
                direction: rtl;
                display: flex;
                align-items: center;
                justify-content: space-between;
            }
            .emergency-contacts .btn i {
                margin-left: 8px;
            }
        `;
        
        // Clear previous styles and update content
        document.querySelectorAll('style').forEach(el => el.remove());
        document.head.appendChild(style);
        
        // Update the recommendations container with fade effect
        recommendationsContainer.style.opacity = '0';
        setTimeout(() => {
            recommendationsContainer.innerHTML = recommendationsHTML;
            recommendationsContainer.style.opacity = '1';
            
            // Initialize tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        }, 300);
    }

    // Initialize with default recommendations
    // Use the existing urlParams and alertType from above
    if (alertType) {
        updateRecommendations(alertType);
        // Set the weather issue select value if it exists
        const weatherSelect = document.getElementById('weatherIssue');
        if (weatherSelect) {
            weatherSelect.value = alertType;
        }
    } else {
        // Default to showing general safety information
        updateRecommendations('general');
    }
    
    // Add click handler for emergency buttons
    document.querySelectorAll('.emergency-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            const number = this.getAttribute('data-number');
            if (confirm(`ŸáŸÑ ÿ™ÿ±ŸäÿØ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ÿßŸÑÿ±ŸÇŸÖ ${number}ÿü`)) {
                window.location.href = `tel:${number}`;
            }
        });
    });
    
    // Function to check weather for a specific location
    async function checkWeatherForLocation(locationName) {
        try {
            // Show loading state
            const alertBox = document.getElementById('weatherAlert');
            alertBox.innerHTML = `
                <div class="d-flex align-items-center">
                    <div class="spinner-border me-2" role="status">
                        <span class="visually-hidden">ÿ¨ÿßÿ±Ÿç ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ...</span>
                    </div>
                    <strong>ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ≠ÿßŸÑÿ© ÿßŸÑÿ∑ŸÇÿ≥ ŸÅŸä ${locationName}...</strong>
                </div>
            `;
            alertBox.classList.remove('d-none', 'alert-danger', 'alert-warning', 'alert-info');
            alertBox.classList.add('alert-info');

            // Simulate API call (in a real app, you would call a weather API here)
            await new Promise(resolve => setTimeout(resolve, 1500));
            
            // Example weather conditions for demonstration
            const locations = {
                'ÿ¨ÿ®ŸÑ ÿ¥ŸÖÿ≥': { type: 'snow', message: 'ÿ™ÿ≠ÿ∞Ÿäÿ±: ÿØÿ±ÿ¨ÿßÿ™ ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ© ÿ™ÿ≠ÿ™ ÿßŸÑÿµŸÅÿ± ŸÖÿπ ŸÅÿ±ÿµÿ© ŸÑÿ™ÿ≥ÿßŸÇÿ∑ ÿßŸÑÿ´ŸÑŸàÿ¨' },
                'ÿßŸÑÿ±Ÿäÿßÿ∂': { type: 'extreme_heat', message: 'ÿ™ÿ≠ÿ∞Ÿäÿ±: ŸÖŸàÿ¨ÿ© ÿ≠ÿ± ÿ¥ÿØŸäÿØÿ© - ÿ™ÿ¨ŸÜÿ® ÿßŸÑÿ™ÿπÿ±ÿ∂ ÿßŸÑŸÖÿ®ÿßÿ¥ÿ± ŸÑŸÑÿ¥ŸÖÿ≥' },
                'ÿ¨ÿØÿ©': { type: 'heavy_rain', message: 'ÿ™ÿ≠ÿ∞Ÿäÿ±: ÿ£ŸÖÿ∑ÿßÿ± ÿ∫ÿ≤Ÿäÿ±ÿ© ŸÖÿ™ŸàŸÇÿπÿ© ŸÖÿπ ÿ±Ÿäÿßÿ≠ ŸÇŸàŸäÿ©' },
                'ÿßŸÑÿØŸÖÿßŸÖ': { type: 'dust', message: 'ÿ™ÿ≠ÿ∞Ÿäÿ±: ÿπÿßÿµŸÅÿ© ÿ™ÿ±ÿßÿ®Ÿäÿ© - ŸäŸèŸÜÿµÿ≠ ÿ®ÿπÿØŸÖ ÿßŸÑÿÆÿ±Ÿàÿ¨' },
                'ÿπÿ≥Ÿäÿ±': { type: 'fog', message: 'ÿ™ÿ≠ÿ∞Ÿäÿ±: ÿ∂ÿ®ÿßÿ® ŸÉÿ´ŸäŸÅ - ÿßŸÜÿÆŸÅÿßÿ∂ ŸÅŸä ŸÖÿØŸâ ÿßŸÑÿ±ÿ§Ÿäÿ©' }
            };

            const weatherInfo = locations[locationName] || {
                type: 'info',
                message: 'ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™ ÿ¨ŸàŸäÿ© ÿ≠ÿßŸÑŸäÿßŸã ŸÅŸä Ÿáÿ∞Ÿá ÿßŸÑŸÖŸÜÿ∑ŸÇÿ©'
            };

            // Show the weather alert
            showWeatherAlert(weatherInfo.type, weatherInfo.message);

        } catch (error) {
            console.error('Error checking weather:', error);
            showWeatherAlert('error', 'ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ¨ŸÑÿ® ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ∑ŸÇÿ≥');
        }
    }

    // Function to show weather alert
    function showWeatherAlert(type, message) {
        const alertBox = document.getElementById('weatherAlert');
        const alertDetails = document.getElementById('alertDetails');
        
        let icon = '‚ÑπÔ∏è';
        alertBox.className = 'alert d-flex align-items-center';
        
        switch(type) {
            case 'snow':
                icon = '‚ùÑÔ∏è';
                alertBox.classList.add('alert-info');
                break;
            case 'extreme_heat':
                icon = 'ü•µ';
                alertBox.classList.add('alert-warning');
                break;
            case 'heavy_rain':
                icon = 'üåßÔ∏è';
                alertBox.classList.add('alert-danger');
                break;
            case 'dust':
                icon = 'üí®';
                alertBox.classList.add('alert-warning');
                break;
            case 'fog':
                icon = 'üå´Ô∏è';
                alertBox.classList.add('alert-info');
                break;
            default:
                alertBox.classList.add('alert-secondary');
        }
        
        alertBox.innerHTML = `
            ${icon} <strong>${message}</strong>
            <button type="button" class="btn-close me-auto" data-bs-dismiss="alert" aria-label="Close"></button>
        `;
        alertBox.classList.remove('d-none');
    }

    // Add click handlers for example locations
    document.querySelectorAll('.example-location').forEach(button => {
        button.addEventListener('click', () => {
            const location = button.getAttribute('data-location');
            checkWeatherForLocation(location);
        });
    });

    // Initialize form validation
    const form = document.getElementById('safetyForm');
    if (form) {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            const locationInput = document.getElementById('locationInput');
            if (locationInput && locationInput.value.trim()) {
                checkWeatherForLocation(locationInput.value.trim());
            }
        });
    }

    // Close the DOMContentLoaded event listener
});
